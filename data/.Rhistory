#facet_grid(device ~ ., scales="free_y") +
labs(x = "Thermal Neutron Flux Increase [%]", y = "Average FIT Rate [a.u.]") +
theme(legend.title = element_blank(), legend.position="bottom",axis.text.x=element_text(size=14) , axis.text.y=element_text(size=14) , text = element_text(size = 14), legend.key.width=unit(1.1, "cm"))
return(plot)
}
dfPlot <- data.frame()
dfTX = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanX',])
FIT_by_thermal_per <- function(df){
high_flux = 13
initial_thermal_flux = 4
final_flux = 8
datFIT = data.frame(matrix(ncol = 5, nrow = 0))
colnames(datFIT) = c('Thermal_flux', 'SDC_FIT_high', 'DUE_FIT_high', 'SDC_FIT_thermal', 'DUE_FIT_thermal')
row=1
sdc_high = df$cross_section_SDC_high * high_flux
due_high = df$cross_section_DUE_high * high_flux
for (i in seq(from=initial_thermal_flux, to=final_flux, by=0.01)) {
datFIT[row,'Thermal_flux'] =  (100*i / initial_thermal_flux)
sdc_thermal = df$cross_section_SDC_thermals * i
due_thermal = df$cross_section_DUE_thermals * i
total_sdc = sdc_thermal + sdc_high
total_due = due_thermal + due_high
datFIT[row,'SDC_FIT_high'] = sdc_high*100/total_sdc
datFIT[row,'DUE_FIT_high'] = due_high*100/total_due
datFIT[row,'SDC_FIT_thermal'] = sdc_thermal*100/total_sdc
datFIT[row,'DUE_FIT_thermal'] = due_thermal*100/total_due
row = row+1
}
datFITmelted = melt(datFIT, id.vars = 'Thermal_flux')
return(datFITmelted)
}
plot_fit_facet_per <- function(df, ncols=3){
legendLabels=c("SDC High Energy", "DUE High Energy", "SDC Thermal", "DUE Thermal")
plot = ggplot(df, aes(x=Thermal_flux, y=value, color=variable, linetype=variable)) +
scale_color_manual(name="Energy", values=c(
"#C00000"
, "#9DC3E6"
, "#C00000"
, "#9DC3E6"
), labels=legendLabels) +
scale_linetype_manual(name="Energy", values=c(
"solid"
, "solid"
, "dotdash"
, "dotdash"
), labels=legendLabels) +
scale_y_log10() +
geom_line(size=1.1) +
facet_wrap(c('device'), ncol=ncols, scales="free_y") + # facet_wrap(device ~ ., ncol=ncols, scales="free_y") +
#facet_grid(device ~ ., scales="free_y") +
labs(x = "Thermal Neutron Flux Increase [%]", y = "Average FIT Rate [a.u.]") +
theme(legend.title = element_blank(), legend.position="bottom",axis.text.x=element_text(size=14) , axis.text.y=element_text(size=14) , text = element_text(size = 14), legend.key.width=unit(1.1, "cm"))
return(plot)
}
dfPlot <- data.frame()
dfTX = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanX',])
dfTX$device = "TitanX"
dfPlot = rbind.data.frame(dfPlot, dfTX)
dfTV = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanV',])
dfTV$device = "TitanV"
dfPlot = rbind.data.frame(dfPlot, dfTV)
dfK20 = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'K20',])
dfK20$device = "K20"
dfPlot = rbind.data.frame(dfPlot, dfK20)
dfCG = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'CPU+GPU',])
dfCG$device = "CPU+GPU"
dfPlot = rbind.data.frame(dfPlot, dfCG)
dfXP = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'XeonPhi',])
dfXP$device = "XeonPhi"
dfPlot = rbind.data.frame(dfPlot, dfXP)
dfF = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'FPGA',])
dfF$device = "FPGA"
dfPlot = rbind.data.frame(dfPlot, dfF)
dfPlot$device <- factor(dfPlot$device, levels = c("XeonPhi", "CPU+GPU", "FPGA", "K20", "TitanX", "TitanV"))
plot_fit_facet_per(dfPlot,ncols=3)
FIT_by_thermal_per <- function(df){
high_flux = 13
initial_thermal_flux = 4
final_flux = 8
datFIT = data.frame(matrix(ncol = 5, nrow = 0))
colnames(datFIT) = c('Thermal_flux', 'SDC_FIT_high', 'DUE_FIT_high', 'SDC_FIT_thermal', 'DUE_FIT_thermal')
row=1
sdc_high = df$cross_section_SDC_high * high_flux
due_high = df$cross_section_DUE_high * high_flux
for (i in seq(from=initial_thermal_flux, to=final_flux, by=0.01)) {
datFIT[row,'Thermal_flux'] =  (100*i / initial_thermal_flux)
sdc_thermal = df$cross_section_SDC_thermals * i
due_thermal = df$cross_section_DUE_thermals * i
total_sdc = sdc_thermal + sdc_high
total_due = due_thermal + due_high
datFIT[row,'SDC_FIT_high'] = sdc_high*100/total_sdc
datFIT[row,'DUE_FIT_high'] = due_high*100/total_due
datFIT[row,'SDC_FIT_thermal'] = sdc_thermal*100/total_sdc
datFIT[row,'DUE_FIT_thermal'] = due_thermal*100/total_due
row = row+1
}
datFITmelted = melt(datFIT, id.vars = 'Thermal_flux')
return(datFITmelted)
}
plot_fit_facet_per <- function(df, ncols=3){
legendLabels=c("SDC High Energy", "DUE High Energy", "SDC Thermal", "DUE Thermal")
plot = ggplot(df, aes(x=Thermal_flux, y=value, color=variable, linetype=variable)) +
scale_color_manual(name="Energy", values=c(
"#C00000"
, "#9DC3E6"
, "#C00000"
, "#9DC3E6"
), labels=legendLabels) +
scale_linetype_manual(name="Energy", values=c(
"solid"
, "solid"
, "dotdash"
, "dotdash"
), labels=legendLabels) +
#scale_y_log10() +
geom_line(size=1.1) +
facet_wrap(c('device'), ncol=ncols, scales="free_y") + # facet_wrap(device ~ ., ncol=ncols, scales="free_y") +
#facet_grid(device ~ ., scales="free_y") +
labs(x = "Thermal Neutron Flux Increase [%]", y = "Average FIT Rate [a.u.]") +
theme(legend.title = element_blank(), legend.position="bottom",axis.text.x=element_text(size=14) , axis.text.y=element_text(size=14) , text = element_text(size = 14), legend.key.width=unit(1.1, "cm"))
return(plot)
}
dfPlot <- data.frame()
dfTX = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanX',])
dfTX$device = "TitanX"
dfPlot = rbind.data.frame(dfPlot, dfTX)
dfTV = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanV',])
dfTV$device = "TitanV"
dfPlot = rbind.data.frame(dfPlot, dfTV)
dfK20 = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'K20',])
dfK20$device = "K20"
dfPlot = rbind.data.frame(dfPlot, dfK20)
dfCG = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'CPU+GPU',])
dfCG$device = "CPU+GPU"
dfPlot = rbind.data.frame(dfPlot, dfCG)
dfXP = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'XeonPhi',])
dfXP$device = "XeonPhi"
dfPlot = rbind.data.frame(dfPlot, dfXP)
dfF = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'FPGA',])
dfF$device = "FPGA"
dfPlot = rbind.data.frame(dfPlot, dfF)
dfPlot$device <- factor(dfPlot$device, levels = c("XeonPhi", "CPU+GPU", "FPGA", "K20", "TitanX", "TitanV"))
plot_fit_facet_per(dfPlot,ncols=3)
FIT_by_thermal_per <- function(df){
high_flux = 13
initial_thermal_flux = 4
final_flux = 8
datFIT = data.frame(matrix(ncol = 5, nrow = 0))
colnames(datFIT) = c('Thermal_flux', 'SDC_FIT_high', 'DUE_FIT_high', 'SDC_FIT_thermal', 'DUE_FIT_thermal')
row=1
sdc_high = df$cross_section_SDC_high * high_flux
due_high = df$cross_section_DUE_high * high_flux
for (i in seq(from=initial_thermal_flux, to=final_flux, by=0.01)) {
datFIT[row,'Thermal_flux'] =  (i / initial_thermal_flux)
sdc_thermal = df$cross_section_SDC_thermals * i
due_thermal = df$cross_section_DUE_thermals * i
total_sdc = sdc_thermal + sdc_high
total_due = due_thermal + due_high
datFIT[row,'SDC_FIT_high'] = sdc_high*100/total_sdc
datFIT[row,'DUE_FIT_high'] = due_high*100/total_due
datFIT[row,'SDC_FIT_thermal'] = sdc_thermal*100/total_sdc
datFIT[row,'DUE_FIT_thermal'] = due_thermal*100/total_due
row = row+1
}
datFITmelted = melt(datFIT, id.vars = 'Thermal_flux')
return(datFITmelted)
}
plot_fit_facet_per <- function(df, ncols=3){
legendLabels=c("SDC High Energy", "DUE High Energy", "SDC Thermal", "DUE Thermal")
plot = ggplot(df, aes(x=Thermal_flux, y=value, color=variable, linetype=variable)) +
scale_color_manual(name="Energy", values=c(
"#C00000"
, "#9DC3E6"
, "#C00000"
, "#9DC3E6"
), labels=legendLabels) +
scale_linetype_manual(name="Energy", values=c(
"solid"
, "solid"
, "dotdash"
, "dotdash"
), labels=legendLabels) +
#scale_y_log10() +
geom_line(size=1.1) +
facet_wrap(c('device'), ncol=ncols, scales="free_y") + # facet_wrap(device ~ ., ncol=ncols, scales="free_y") +
#facet_grid(device ~ ., scales="free_y") +
labs(x = "Thermal Neutron Flux Increase", y = "FIT Rate Contribution [%]") +
theme(legend.title = element_blank(), legend.position="bottom",axis.text.x=element_text(size=14) , axis.text.y=element_text(size=14) , text = element_text(size = 14), legend.key.width=unit(1.1, "cm"))
return(plot)
}
dfPlot <- data.frame()
dfTX = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanX',])
dfTX$device = "TitanX"
dfPlot = rbind.data.frame(dfPlot, dfTX)
dfTV = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanV',])
dfTV$device = "TitanV"
dfPlot = rbind.data.frame(dfPlot, dfTV)
dfK20 = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'K20',])
dfK20$device = "K20"
dfPlot = rbind.data.frame(dfPlot, dfK20)
dfCG = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'CPU+GPU',])
dfCG$device = "CPU+GPU"
dfPlot = rbind.data.frame(dfPlot, dfCG)
dfXP = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'XeonPhi',])
dfXP$device = "XeonPhi"
dfPlot = rbind.data.frame(dfPlot, dfXP)
dfF = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'FPGA',])
dfF$device = "FPGA"
dfPlot = rbind.data.frame(dfPlot, dfF)
dfPlot$device <- factor(dfPlot$device, levels = c("XeonPhi", "CPU+GPU", "FPGA", "K20", "TitanX", "TitanV"))
plot_fit_facet_per(dfPlot,ncols=3)
FIT_by_thermal_per <- function(df){
high_flux = 13
initial_thermal_flux = 4
final_flux = 8
datFIT = data.frame(matrix(ncol = 5, nrow = 0))
colnames(datFIT) = c('Thermal_flux', 'SDC_FIT_high', 'DUE_FIT_high', 'SDC_FIT_thermal', 'DUE_FIT_thermal')
row=1
sdc_high = df$cross_section_SDC_high * high_flux
due_high = df$cross_section_DUE_high * high_flux
for (i in seq(from=initial_thermal_flux, to=final_flux, by=0.01)) {
datFIT[row,'Thermal_flux'] =  (i / initial_thermal_flux)
sdc_thermal = df$cross_section_SDC_thermals * i
due_thermal = df$cross_section_DUE_thermals * i
total_sdc = sdc_thermal + sdc_high
total_due = due_thermal + due_high
datFIT[row,'SDC_FIT_high'] = sdc_high*100/total_sdc
datFIT[row,'DUE_FIT_high'] = due_high*100/total_due
datFIT[row,'SDC_FIT_thermal'] = sdc_thermal*100/total_sdc
datFIT[row,'DUE_FIT_thermal'] = due_thermal*100/total_due
row = row+1
}
datFITmelted = melt(datFIT, id.vars = 'Thermal_flux')
return(datFITmelted)
}
plot_fit_facet_per <- function(df, ncols=3){
legendLabels=c("SDC High Energy", "DUE High Energy", "SDC Thermal", "DUE Thermal")
plot = ggplot(df, aes(x=Thermal_flux, y=value, color=variable, linetype=variable)) +
scale_color_manual(name="Energy", values=c(
"#C00000"
, "#9DC3E6"
, "#C00000"
, "#9DC3E6"
), labels=legendLabels) +
scale_linetype_manual(name="Energy", values=c(
"solid"
, "solid"
, "dotdash"
, "dotdash"
), labels=legendLabels) +
#scale_y_log10() +
geom_line(size=1.1) +
facet_wrap(c('device'), ncol=ncols, scales="free_y") + # facet_wrap(device ~ ., ncol=ncols, scales="free_y") +
#facet_grid(device ~ ., scales="free_y") +
labs(x = "Thermal Neutron Flux Increase", y = "FIT Rate Contribution [%]") +
theme(legend.title = element_blank(), legend.position="bottom",axis.text.x=element_text(size=14) , axis.text.y=element_text(size=14) , text = element_text(size = 14), legend.key.width=unit(1.1, "cm"))
return(plot)
}
dfPlot <- data.frame()
dfTX = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanX',])
dfTX$device = "TitanX"
dfPlot = rbind.data.frame(dfPlot, dfTX)
dfTV = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanV',])
dfTV$device = "TitanV"
dfPlot = rbind.data.frame(dfPlot, dfTV)
dfK20 = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'K20',])
dfK20$device = "K20"
dfPlot = rbind.data.frame(dfPlot, dfK20)
dfCG = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'CPU+GPU',])
dfCG$device = "CPU+GPU"
dfPlot = rbind.data.frame(dfPlot, dfCG)
dfXP = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'XeonPhi',])
dfXP$device = "XeonPhi"
dfPlot = rbind.data.frame(dfPlot, dfXP)
dfF = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'FPGA',])
dfF$device = "FPGA"
dfPlot = rbind.data.frame(dfPlot, dfF)
dfPlot$device <- factor(dfPlot$device, levels = c("XeonPhi", "CPU+GPU", "FPGA", "K20", "TitanX", "TitanV"))
p=plot_fit_facet_per(dfPlot,ncols=3)
ggsave(p, file='fit-thermal-increase.pdf', width = 12, height = 7)
FIT_by_thermal_per <- function(df){
high_flux = 13
initial_thermal_flux = 4
final_flux = 4*2.5
datFIT = data.frame(matrix(ncol = 5, nrow = 0))
colnames(datFIT) = c('Thermal_flux', 'SDC_FIT_high', 'DUE_FIT_high', 'SDC_FIT_thermal', 'DUE_FIT_thermal')
row=1
sdc_high = df$cross_section_SDC_high * high_flux
due_high = df$cross_section_DUE_high * high_flux
for (i in seq(from=initial_thermal_flux, to=final_flux, by=0.01)) {
datFIT[row,'Thermal_flux'] =  (i / initial_thermal_flux)
sdc_thermal = df$cross_section_SDC_thermals * i
due_thermal = df$cross_section_DUE_thermals * i
total_sdc = sdc_thermal + sdc_high
total_due = due_thermal + due_high
datFIT[row,'SDC_FIT_high'] = sdc_high*100/total_sdc
datFIT[row,'DUE_FIT_high'] = due_high*100/total_due
datFIT[row,'SDC_FIT_thermal'] = sdc_thermal*100/total_sdc
datFIT[row,'DUE_FIT_thermal'] = due_thermal*100/total_due
row = row+1
}
datFITmelted = melt(datFIT, id.vars = 'Thermal_flux')
return(datFITmelted)
}
plot_fit_facet_per <- function(df, ncols=3){
legendLabels=c("SDC High Energy", "DUE High Energy", "SDC Thermal", "DUE Thermal")
plot = ggplot(df, aes(x=Thermal_flux, y=value, color=variable, linetype=variable)) +
scale_color_manual(name="Energy", values=c(
"#C00000"
, "#9DC3E6"
, "#C00000"
, "#9DC3E6"
), labels=legendLabels) +
scale_linetype_manual(name="Energy", values=c(
"solid"
, "solid"
, "dotdash"
, "dotdash"
), labels=legendLabels) +
#scale_y_log10() +
geom_line(size=1.1) +
facet_wrap(c('device'), ncol=ncols, scales="free_y") + # facet_wrap(device ~ ., ncol=ncols, scales="free_y") +
#facet_grid(device ~ ., scales="free_y") +
labs(x = "Thermal Neutron Flux Increase", y = "FIT Rate Contribution [%]") +
theme(legend.title = element_blank(), legend.position="bottom",axis.text.x=element_text(size=14) , axis.text.y=element_text(size=14) , text = element_text(size = 14), legend.key.width=unit(1.1, "cm"))
return(plot)
}
dfPlot <- data.frame()
dfTX = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanX',])
dfTX$device = "TitanX"
dfPlot = rbind.data.frame(dfPlot, dfTX)
dfTV = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'TitanV',])
dfTV$device = "TitanV"
dfPlot = rbind.data.frame(dfPlot, dfTV)
dfK20 = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'K20',])
dfK20$device = "K20"
dfPlot = rbind.data.frame(dfPlot, dfK20)
dfCG = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'CPU+GPU',])
dfCG$device = "CPU+GPU"
dfPlot = rbind.data.frame(dfPlot, dfCG)
dfXP = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'XeonPhi',])
dfXP$device = "XeonPhi"
dfPlot = rbind.data.frame(dfPlot, dfXP)
dfF = FIT_by_thermal_per(dat_mean[dat_mean$Group.1 == 'FPGA',])
dfF$device = "FPGA"
dfPlot = rbind.data.frame(dfPlot, dfF)
dfPlot$device <- factor(dfPlot$device, levels = c("XeonPhi", "CPU+GPU", "FPGA", "K20", "TitanX", "TitanV"))
p=plot_fit_facet_per(dfPlot,ncols=3)
ggsave(p, file='fit-thermal-increase.pdf', width = 12, height = 7)
knitr::opts_chunk$set(echo = TRUE)
rm(dat_melted)
high = dat_mean$cross_section_SDC_high * 13
thermals = dat_mean$cross_section_SDC_thermals * 5.776
dat_mean$High_Energy = high*100/(high+thermals)
dat_mean$Thermals = thermals*100/(high+thermals)
dat_melted = melt(dat_mean[,c('Group.1', 'High_Energy', 'Thermals')], id.vars = 'Group.1' )
dat_mean = aggregate(datNormalized[, c('cross_section_SDC_high', 'cross_section_DUE_high', 'cross_section_SDC_thermals', 'cross_section_DUE_thermals')], list(datNormalized$Device), mean, na.rm=TRUE,na.action = na.omit)
#dat_mean
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(reshape2)
dat = read.csv("data_formatted.csv",sep=",")
dat$cross_section_SDC_thermals = dat$cross_section_SDC_thermals / (4.96/2.71)
summary(dat)
datNormalized = dat
for (board in unique(dat$Device)) {
# Get all cross section values for one device
tmp_values = c(subset(dat,dat$Device==board)$cross_section_SDC_high, subset(dat,dat$Device==board)$cross_section_DUE_high, subset(dat,dat$Device==board)$cross_section_SDC_thermals, subset(dat,dat$Device==board)$cross_section_DUE_thermals)
tmp_values = tmp_values[tmp_values > 0] # remove zeros in case there is zeros
tmp_min = min(tmp_values, na.rm=TRUE) # get the minimum cross section value
print(paste("Device: ", board, "; Minimum: ",tmp_min))
# Normalize all date from one device to the minimum value found
datNormalized[datNormalized$Device == board, ]$cross_section_SDC_high = datNormalized[datNormalized$Device == board, ]$cross_section_SDC_high / tmp_min
datNormalized[datNormalized$Device == board, ]$cross_section_DUE_high = datNormalized[datNormalized$Device == board, ]$cross_section_DUE_high / tmp_min
datNormalized[datNormalized$Device == board, ]$cross_section_SDC_thermals = datNormalized[datNormalized$Device == board, ]$cross_section_SDC_thermals / tmp_min
datNormalized[datNormalized$Device == board, ]$cross_section_DUE_thermals = datNormalized[datNormalized$Device == board, ]$cross_section_DUE_thermals / tmp_min
}
dat_mean = aggregate(datNormalized[, c('cross_section_SDC_high', 'cross_section_DUE_high', 'cross_section_SDC_thermals', 'cross_section_DUE_thermals')], list(datNormalized$Device), mean, na.rm=TRUE,na.action = na.omit)
#dat_mean
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(reshape2)
dat = read.csv("data_formatted.csv",sep=",")
dat$cross_section_SDC_thermals = dat$cross_section_SDC_thermals / (4.96/2.71)
summary(dat)
datNormalized = dat
for (board in unique(dat$Device)) {
# Get all cross section values for one device
tmp_values = c(subset(dat,dat$Device==board)$cross_section_SDC_high, subset(dat,dat$Device==board)$cross_section_DUE_high, subset(dat,dat$Device==board)$cross_section_SDC_thermals, subset(dat,dat$Device==board)$cross_section_DUE_thermals)
tmp_values = tmp_values[tmp_values > 0] # remove zeros in case there is zeros
tmp_min = min(tmp_values, na.rm=TRUE) # get the minimum cross section value
print(paste("Device: ", board, "; Minimum: ",tmp_min))
# Normalize all date from one device to the minimum value found
datNormalized[datNormalized$Device == board, ]$cross_section_SDC_high = datNormalized[datNormalized$Device == board, ]$cross_section_SDC_high / tmp_min
datNormalized[datNormalized$Device == board, ]$cross_section_DUE_high = datNormalized[datNormalized$Device == board, ]$cross_section_DUE_high / tmp_min
datNormalized[datNormalized$Device == board, ]$cross_section_SDC_thermals = datNormalized[datNormalized$Device == board, ]$cross_section_SDC_thermals / tmp_min
datNormalized[datNormalized$Device == board, ]$cross_section_DUE_thermals = datNormalized[datNormalized$Device == board, ]$cross_section_DUE_thermals / tmp_min
}
dat_mean = aggregate(datNormalized[, c('cross_section_SDC_high', 'cross_section_DUE_high', 'cross_section_SDC_thermals', 'cross_section_DUE_thermals')], list(datNormalized$Device), mean, na.rm=TRUE,na.action = na.omit)
#dat_mean
rm(dat_melted)
high = dat_mean$cross_section_SDC_high * 13
thermals = dat_mean$cross_section_SDC_thermals * 5.776
dat_mean$High_Energy = high*100/(high+thermals)
dat_mean$Thermals = thermals*100/(high+thermals)
dat_melted = melt(dat_mean[,c('Group.1', 'High_Energy', 'Thermals')], id.vars = 'Group.1' )
dat_melted$scenario = 'NSDC'
#dat_melted$scenario = 'NYC SDC'
#dat_melted = rbind(dat_melted, dat_melted2)
rm(dat_melted2)
high = dat_mean$cross_section_DUE_high * 13
thermals = dat_mean$cross_section_DUE_thermals * 5.776
dat_mean$High_Energy = high*100/(high+thermals)
dat_mean$Thermals = thermals*100/(high+thermals)
dat_melted2 = melt(dat_mean[,c('Group.1', 'High_Energy', 'Thermals')], id.vars = 'Group.1' )
dat_melted2$scenario = 'NDUE'
#dat_melted2$scenario = 'NYC DUE'
dat_melted = rbind(dat_melted, dat_melted2)
rm(dat_melted2)
high = dat_mean$cross_section_SDC_high * 166.4
thermals = dat_mean$cross_section_SDC_thermals * 125.628
dat_mean$High_Energy = high*100/(high+thermals)
dat_mean$Thermals = thermals*100/(high+thermals)
dat_melted2 = melt(dat_mean[,c('Group.1', 'High_Energy', 'Thermals')], id.vars = 'Group.1' )
dat_melted2$scenario = 'LSDC'
#dat_melted2$scenario = 'LXV SDC'
dat_melted = rbind(dat_melted, dat_melted2)
rm(dat_melted2)
high = dat_mean$cross_section_DUE_high * 166.4
thermals = dat_mean$cross_section_DUE_thermals * 125.628
dat_mean$High_Energy = high*100/(high+thermals)
dat_mean$Thermals = thermals*100/(high+thermals)
dat_melted2 = melt(dat_mean[,c('Group.1', 'High_Energy', 'Thermals')], id.vars = 'Group.1' )
dat_melted2$scenario = 'LDUE'
#dat_melted2$scenario = 'LXV DUE'
dat_melted = rbind(dat_melted, dat_melted2)
dat_melted$variable <- factor(dat_melted$variable, levels = c("Thermals", "High_Energy"))
dat_melted$scenario <- factor(dat_melted$scenario, levels = c("NSDC", "NDUE", "LSDC", "LDUE"))
#dat_melted$scenario <- factor(dat_melted$scenario, levels = c("NYC SDC", "NYC DUE", "LXV SDC", "LXV DUE"))
#dat_melted$scenario <- factor(dat_melted$scenario, levels = c("NYC SDC", "NYC DUE", "Leadville  SDC", "Leadville DUE"))
dat_melted$Group.1 <- factor(dat_melted$Group.1, levels = c( "CPU", "GPUembedded", "CPU+GPU", "XeonPhi", "K20", "TitanX", "TitanV", "FPGA"))
#dat_melted = dat_melted[which(dat_melted$Group.1 != "CPU" & dat_melted$Group.1 != "GPUembedded"),]
p = ggplot(dat_melted) +
geom_bar(stat="identity",aes(x = scenario, y = value, fill=variable), position=position_stack()) +
labs(x = "Location", y = "Average FIT Rate Contribution [%]") +
#facet_wrap(~Group.1, scales = "free_y") +
facet_wrap(~Group.1, ncol=4) +
#scale_y_log10() +
scale_fill_manual(values=c(
"#0070c0"
, "#c00000")
, labels = c('Thermal', 'High Energy')
)+
theme(legend.title = element_blank(), legend.position="bottom",axis.text.x=element_text(size=13) , axis.text.y=element_text(size=14) , text = element_text(size = 14))
p
ggsave(p, file="SDC-scenarios-per.pdf", width = 12, height = 7)
rm(dat_melted)
high = dat_mean$cross_section_SDC_high * 13
thermals = dat_mean$cross_section_SDC_thermals * 5.776
dat_mean$High_Energy = high*100/(high+thermals)
dat_mean$Thermals = thermals*100/(high+thermals)
dat_melted = melt(dat_mean[,c('Group.1', 'High_Energy', 'Thermals')], id.vars = 'Group.1' )
dat_melted$scenario = 'NSDC'
#dat_melted$scenario = 'NYC SDC'
#dat_melted = rbind(dat_melted, dat_melted2)
rm(dat_melted2)
high = dat_mean$cross_section_DUE_high * 13
thermals = dat_mean$cross_section_DUE_thermals * 5.776
dat_mean$High_Energy = high*100/(high+thermals)
dat_mean$Thermals = thermals*100/(high+thermals)
dat_melted2 = melt(dat_mean[,c('Group.1', 'High_Energy', 'Thermals')], id.vars = 'Group.1' )
dat_melted2$scenario = 'NDUE'
#dat_melted2$scenario = 'NYC DUE'
dat_melted = rbind(dat_melted, dat_melted2)
rm(dat_melted2)
high = dat_mean$cross_section_SDC_high * 166.4
thermals = dat_mean$cross_section_SDC_thermals * 125.628
dat_mean$High_Energy = high*100/(high+thermals)
dat_mean$Thermals = thermals*100/(high+thermals)
dat_melted2 = melt(dat_mean[,c('Group.1', 'High_Energy', 'Thermals')], id.vars = 'Group.1' )
dat_melted2$scenario = 'LSDC'
#dat_melted2$scenario = 'LXV SDC'
dat_melted = rbind(dat_melted, dat_melted2)
rm(dat_melted2)
high = dat_mean$cross_section_DUE_high * 166.4
thermals = dat_mean$cross_section_DUE_thermals * 125.628
dat_mean$High_Energy = high*100/(high+thermals)
dat_mean$Thermals = thermals*100/(high+thermals)
dat_melted2 = melt(dat_mean[,c('Group.1', 'High_Energy', 'Thermals')], id.vars = 'Group.1' )
dat_melted2$scenario = 'LDUE'
#dat_melted2$scenario = 'LXV DUE'
dat_melted = rbind(dat_melted, dat_melted2)
dat_melted$variable <- factor(dat_melted$variable, levels = c("Thermals", "High_Energy"))
dat_melted$scenario <- factor(dat_melted$scenario, levels = c("NSDC", "NDUE", "LSDC", "LDUE"))
#dat_melted$scenario <- factor(dat_melted$scenario, levels = c("NYC SDC", "NYC DUE", "LXV SDC", "LXV DUE"))
#dat_melted$scenario <- factor(dat_melted$scenario, levels = c("NYC SDC", "NYC DUE", "Leadville  SDC", "Leadville DUE"))
dat_melted$Group.1 <- factor(dat_melted$Group.1, levels = c( "CPU", "GPUembedded", "CPU+GPU", "XeonPhi", "K20", "TitanX", "TitanV", "FPGA"))
#dat_melted = dat_melted[which(dat_melted$Group.1 != "CPU" & dat_melted$Group.1 != "GPUembedded"),]
p = ggplot(dat_melted) +
geom_bar(stat="identity",aes(x = scenario, y = value, fill=variable), position=position_stack()) +
labs(x = "Location", y = "Average FIT Rate Contribution [%]") +
#facet_wrap(~Group.1, scales = "free_y") +
facet_wrap(~Group.1, ncol=4) +
#scale_y_log10() +
scale_fill_manual(values=c(
"#0070c0"
, "#c00000")
, labels = c('Thermal', 'High Energy')
)+
theme(legend.title = element_blank(), legend.position="bottom",axis.text.x=element_text(size=13) , axis.text.y=element_text(size=14) , text = element_text(size = 14))
p
ggsave(p, file="SDC-scenarios-per.pdf", width = 12, height = 7)
